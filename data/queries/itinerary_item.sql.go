// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: itinerary_item.sql

package queries

import (
	"context"
	"database/sql"
)

const createItineraryItem = `-- name: CreateItineraryItem :exec
INSERT INTO itinerary_items (tripId, title, date, url, phone, address, poiId)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateItineraryItemParams struct {
	Tripid  sql.NullInt32
	Title   sql.NullString
	Date    sql.NullTime
	Url     sql.NullString
	Phone   sql.NullString
	Address sql.NullString
	Poiid   sql.NullString
}

func (q *Queries) CreateItineraryItem(ctx context.Context, arg CreateItineraryItemParams) error {
	_, err := q.db.ExecContext(ctx, createItineraryItem,
		arg.Tripid,
		arg.Title,
		arg.Date,
		arg.Url,
		arg.Phone,
		arg.Address,
		arg.Poiid,
	)
	return err
}

const getItineraryItems = `-- name: GetItineraryItems :many
SELECT itemid, tripid, title, date, url, phone, address, poiid, iscustom, photouri FROM itinerary_items
WHERE TripID = ?
`

func (q *Queries) GetItineraryItems(ctx context.Context, tripid sql.NullInt32) ([]ItineraryItem, error) {
	rows, err := q.db.QueryContext(ctx, getItineraryItems, tripid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItineraryItem
	for rows.Next() {
		var i ItineraryItem
		if err := rows.Scan(
			&i.Itemid,
			&i.Tripid,
			&i.Title,
			&i.Date,
			&i.Url,
			&i.Phone,
			&i.Address,
			&i.Poiid,
			&i.Iscustom,
			&i.Photouri,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
