// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accommodation.sql

package queries

import (
	"context"
	"database/sql"
)

const createAccommodation = `-- name: CreateAccommodation :exec
INSERT INTO accommodations (tripId, title, address, start_date, end_date, url, phone)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateAccommodationParams struct {
	Tripid    int32
	Title     string
	Address   sql.NullString
	StartDate sql.NullTime
	EndDate   sql.NullTime
	Url       sql.NullString
	Phone     sql.NullString
}

func (q *Queries) CreateAccommodation(ctx context.Context, arg CreateAccommodationParams) error {
	_, err := q.db.ExecContext(ctx, createAccommodation,
		arg.Tripid,
		arg.Title,
		arg.Address,
		arg.StartDate,
		arg.EndDate,
		arg.Url,
		arg.Phone,
	)
	return err
}

const getAccommodations = `-- name: GetAccommodations :many
SELECT id, tripid, title, address, start_date, end_date, url, phone FROM accommodations
WHERE tripId = ?
`

func (q *Queries) GetAccommodations(ctx context.Context, tripid int32) ([]Accommodation, error) {
	rows, err := q.db.QueryContext(ctx, getAccommodations, tripid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accommodation
	for rows.Next() {
		var i Accommodation
		if err := rows.Scan(
			&i.ID,
			&i.Tripid,
			&i.Title,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Url,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
